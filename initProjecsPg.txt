## Após criar pasta backend
### Dependencias
1 - yarn init -y
2 - yarn add sequelize
3 - yarn add sequelize-paginate
4 - yarn add express
5 - yarn add -D sequelize-cli
6 - yarn add pg
7 - yarn add pg-hstore
8 - yarn add cors
9 - yarn add dotenv
10 - yarn add -D nodemon

### Config 
1 - yarn sequelize init

2 - criar arquivo dotenv e colocar conteudo:
    DB_PORT=5432
    DB_HOST=localhost
    DB_SCHEMA=public
    DB_NAME=
    DB_USERNAME=
    DB_PASSWORD=

3 - Renomear o arquivo config/config.json para config/database.js e alterar seu conteúdo para:
    require('dotenv/config');

    module.exports = {
    dialect: "postgres",
    port: process.env.DB_PORT,
    host: process.env.DB_HOST,
    schema: process.env.DB_SCHEMA,
    database: process.env.DB_NAME,
    username: process.env.DB_USERNAME,
    password: process.env.DB_PASSWORD,
    logging: false
    };

3 - colocar pastas config e models na pasta src

4 - Criar pasta database, colocar pastas: migration e seeders dentro

5 - Criar arquivo .sequelizerc na pasta raiz e colocar o conteudo:
    const path = require('path');

    module.exports = {
    'config': path.resolve('config', 'database.js'),
    'models-path': path.resolve('app', 'models'),
    'seeders-path': path.resolve('database', 'seeders'),
    'migrations-path': path.resolve('database', 'migrations'),
    };

6 - Configurar o arquivo src/models/index.js, colocar o conteudo dentro:
    const fs = require('fs');
    const path = require('path');
    const Sequelize = require('sequelize');
    const config = require('../../config/database.js');

    const db = {};
    const sequelize = new Sequelize(config);

    fs
    .readdirSync(__dirname)
    .filter(file => (file.indexOf('.') !== 0) && (file !== path.basename(__filename)) && (file.slice(-3) === '.js'))
    .forEach((file) => {
        const model = sequelize.import(path.join(__dirname, file));
        db[model.name] = model;
    });

    Object.keys(db).forEach((modelName) => {
    if (db[modelName].associate) {
        db[modelName].associate(db);
    }
    });

    db.sequelize = sequelize;
    db.Sequelize = Sequelize;

    module.exports = db;

7- Criar migrations, comando:
    yarn sequelize migration:create --name=create-users

8 - Exemplo de migration:
    module.exports = {
        up: (queryInterface, DataTypes) => {
            return queryInterface.createTable("Users", {
            id: {
                allowNull: false,
                autoIncrement: true,
                primaryKey: true,
                type: DataTypes.INTEGER
            },
            email: {
                allowNull: false,
                type: DataTypes.STRING
            },
            login: {
                allowNull: false,
                type: DataTypes.STRING
            },
            password: {
                allowNull: false,
                type: DataTypes.STRING
            }
            },
            {
                timestamps: false
            });
        },

        down: queryInterface => {
            return queryInterface.dropTable("Users");
        }
    };

9 - Executar migration (cria tabela no banco):
    yarn sequelize db:migrate

10 - Create model User.js, exemplo:
    module.exports = (sequelize, DataTypes) => {
        const User = sequelize.define(
            "User",
            {
            email: DataTypes.STRING,
            login: DataTypes.STRING,
            password: DataTypes.STRING
            },
            {
            freezeTableName: true,
            timestamps: false
            }
        );
        return User;
    };

11 - criar server.js na pasta backend, conteudo:
    const express = require("express");
    const cors = require("cors");
    const bodyParser = require("body-parser");
    const { errors } = require('celebrate')
    const routes = require('./app/routes')

    //inicia o express
    const app = express();
    app.use(express.json());

    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(cors());

    app.use("/api", routes);
    app.use(errors());

    app.listen(process.env.PORT || 3001);

    console.log("Server is running...");
